[
  {
    "dataModel": "uml",
    "diagrams": [
      {
        "id": 1,
        "title": "Classe",
        "type": "Bases",
        "shortDescription": "Modèle abstrait d'objets.",
        "longDescription": "Une classe est une définition ou un modèle abstrait qui représente un groupe d'objets ayant des propriétés (attributs) et des comportements (méthodes) communs. Elle décrit les caractéristiques et les comportements que ses instances (ou objets) auront.<br><br>Elle est représentée par un rectangle divisé en trois parties :<br>&nbsp&nbsp&nbsp&nbsp- Le nom de la classe..<br>&nbsp&nbsp&nbsp&nbsp- Ses attributs .<br>&nbsp&nbsp&nbsp&nbsp- Ses méthodes .<br><br><img class='illustration' src='assets/images/uml/class/class-ex1.png'><br><br>Les différents types de visibilité sont représentés par :<br>&nbsp&nbsp&nbsp&nbsp- un '-' pour 'private'.<br>&nbsp&nbsp&nbsp&nbsp- un '+' pour 'public'.<br>&nbsp&nbsp&nbsp&nbsp- Un '#' pour 'protected'.<br>&nbsp&nbsp&nbsp&nbsp- Un '~' pour 'package/default'.",
        "imageUrl": "assets/images/uml/class/class-main.png",
        "source": "https://www.uml-diagrams.org/class.html"
      },
      {
        "id": 6,
        "title": "Relations",
        "type": "Bases",
        "shortDescription": "Interactions entre les éléments.",
        "longDescription": "Les relations en UML décrivent la manière dont différents éléments d'un modèle interagissent ou sont connectés les uns aux autres. Il existe plusieurs types de relations en UML, chacune avec sa propre notation et signification.<br><br>Les relations entre les classes sont représentées par différents types de flèches. Parmis ces relations, nous pouvons trouver des relations d'héritage :<br>&nbsp&nbsp&nbsp&nbsp- Généralisation (une classe hérite d'une autre classe) :<br><br><img class='illustration' src='assets/images/uml/class/generalization.png'><br><br>&nbsp&nbsp&nbsp&nbsp- Réalisation (une classe implémente une interface) :<br><br><img class='illustration' src='assets/images/uml/class/realization.png'><br><br>Il existe également des relations d'usage :<br>&nbsp&nbsp&nbsp&nbsp- Dépendance (l'usage d'un objet par un autre) :<br><br><img class='illustration' src='assets/images/uml/class/dependency.png'><br><br>&nbsp&nbsp&nbsp&nbsp- Association unidirectionelle (un objet peut en stocker un autre dans un champ) :<br><br><img class='illustration' src='assets/images/uml/class/unidirectional.png'><br><br>&nbsp&nbsp&nbsp&nbsp- Association bidirectionelle (deux objets se stockent mutuellement) :<br><br><img class='illustration' src='assets/images/uml/class/bidirectional.png'><br><br>&nbsp&nbsp&nbsp&nbsp- Aggrégation (un objet 1 stock un objet B et l'objet B fait partie de l'objet A) :<br><br><img class='illustration' src='assets/images/uml/class/aggregation.png'><br><br>&nbsp&nbsp&nbsp&nbsp- Composition (une aggregation dont les deux objets ont la même espérance de vie) :<br><br><img class='illustration' src='assets/images/uml/class/composition.png'><br><br>La multiplicité (le nombre d'une classe liée à une autre) des relations entre les classes est représentée par des symboles disposées directement sur ou à coté des flèches :<br>&nbsp&nbsp&nbsp&nbsp- Zero to one : 0..1.<br>&nbsp&nbsp&nbsp&nbsp- Un nombre spécifique : n.<br>&nbsp&nbsp&nbsp&nbsp- Zero to many : 0..*.<br>&nbsp&nbsp&nbsp&nbsp- One to many : 1..*.<br>&nbsp&nbsp&nbsp&nbsp- Une fourchette : m..n.",
        "imageUrl": "assets/images/uml/comment/comment-note.png",
        "source": "https://www.uml-diagrams.org/uml-core.html#comment"
      },
      {
        "id": 2,
        "title": "Objet",
        "type": "Bases",
        "shortDescription": "Instance d'une classe.",
        "longDescription": "Un objet est une instance d'une classe. Par exemple, pour la classe abstraite 'oiseau', on initialise l'objet 'pigeon' qui va hériter de tous les attributs et méthodes de sa classe.",
        "imageUrl": "assets/images/uml/object/object-ex1.png",
        "source": "https://www.uml-diagrams.org/object.html"
      },
      {
        "id": 3,
        "title": "Interface",
        "type": "Bases",
        "shortDescription": "Contrat de comportement pour les classes.",
        "longDescription": "Contrairement à une classe qui fournit une implémentation pour ses méthodes, une interface définit un contrat (sous forme de déclarations de méthodes) que les autres classes ou interfaces peuvent choisir d'implémenter.<br> Une interface peut être implémentée par une ou plusieurs classe, de la même manière qu'une classe peut implémenter plusieurs interfaces.<br>On peut distinguer deux types d'interfaces :<br><br>&nbsp&nbsp&nbsp&nbsp- L'interface fournie (provided interface) par un composant qui indique les services que ce composant offre aux autres composants ou au monde extérieur :<br><br><img class='illustration' src='assets/images/uml/interface/interface-provided.png'><br><br>&nbsp&nbsp&nbsp&nbsp- L'interface requise (required interface) par un composant pour un composant pour fonctionner correctement :<br><br><img class='illustration' src='assets/images/uml/interface/interface-required.png'>\"",
        "imageUrl": "assets/images/uml/interface/interface-ex1.png",
        "source": "https://www.uml-diagrams.org/interface.html"
      },
      {
        "id": 4,
        "title": "Paquetage",
        "type": "Bases",
        "shortDescription": "Regroupement d'éléments.",
        "longDescription": "Un paquetage (package) est un conteneur qui peut contenir différents types d'éléments de modélisation, tels que des classes, des interfaces, des composants, des sous-packages, etc. Il est utilisé pour organiser ces éléments en groupes logiques, facilitant ainsi la gestion, la réutilisation et la maintenance.<br>Ses membres peuvent être visibles à l'intérieur de ce dernier : <br><br><img class='illustration' src='assets/images/uml/package/package-container.png'><br><br>ou bien à l'extérieur :<br><br><img class='illustration' src='assets/images/uml/package/package-outside.png'><br><br>Enfin, on ne peut définir la visibilité des éléments du package que par public ou privé :<br><br><img class='illustration' src='assets/images/uml/package/package-visibility.png'><br><br>Une URI peut être également visible :<br><br><img class='illustration' src='assets/images/uml/package/profile-uri-attribute.png'><br><br>Enfin, un package peut être utilisé comme template et lié à d'autres packages :<br><br><img class='illustration' src='assets/images/uml/package/package-template.png'>",
        "imageUrl": "assets/images/uml/package/package-main.png",
        "source": "https://www.uml-diagrams.org/package-diagrams.html#package"
      },
      {
        "id": 5,
        "title": "Contrainte",
        "type": "Bases",
        "shortDescription": "Règle à suivre pour les éléments.",
        "longDescription": "Une contrainte est une expression qui décrit une condition que les éléments modélisés doivent satisfaire. Une contrainte est souvent exprimée sous forme de texte, et dans de nombreux cas, elle est formulée en langage OCL (Object Constraint Language). L'OCL est un langage formel spécifiquement conçu pour décrire des expressions qui ne peuvent pas être facilement modélisées à l'aide des éléments graphiques UML.<br><br>Pour une contrainte s'appliquant à un attribut, elle peut uivre l'attribut entre accolades :<br><br><img class='illustration' src='assets/images/uml/constraint/constraint-attribute.png'><br><br>Une contrainte s'appliquant à un seul élément sera placée à côté de l'élément. Si elle s'applique à deux ou plusieurs elle sera placée entre ces éléments sur ligne pointillée :<br><br><img class='illustration' src='assets/images/uml/constraint/constraint-dashed.png'><br><br>Elle peut également être placée à la manière d'une note :<br><br><img class='illustration' src='assets/images/uml/constraint/constraint-note.png'>",
        "imageUrl": "assets/images/uml/constraint/constraint-attribute.png",
        "source": "https://www.uml-diagrams.org/package-diagrams.html#package"
      },
      {
        "id": 6,
        "title": "Commentaires",
        "type": "Bases",
        "shortDescription": "Ajout d'explication, de clarifications.",
        "longDescription": "Les notes, souvent appelées commentaires en UML, sont un mécanisme pour ajouter des explications, des clarifications ou des informations supplémentaires à un modèle UML. Elles permettent aux concepteurs, aux développeurs et aux autres parties prenantes de comprendre mieux le contexte, les décisions ou les détails qui ne sont pas explicitement couverts par la notation graphique standard d'UML.",
        "imageUrl": "assets/images/uml/comment/comment-note.png",
        "source": "https://www.uml-diagrams.org/uml-core.html#comment"
      },
      {
        "id": 7,
        "title": "Interactions",
        "type": "Bases",
        "shortDescription": "Echanges d'informations.",
        "longDescription": "L'interaction en UML se réfère à une unité comportementale qui met en évidence les échanges d'informations (souvent sous forme de messages) entre les objets ou les composants au cours d'un scénario spécifique. Les interactions sont principalement illustrées dans les diagrammes d'interaction UML, qui comprennent les diagrammes de séquence, de communication, de timing et d'interaction overview.",
        "imageUrl": "assets/images/uml/interaction/sequence-diagram.png",
        "source": "https://www.uml-diagrams.org/uml-core.html#comment"
      },
      {
        "id": 7,
        "title": "Stéréotype",
        "type": "Bases",
        "shortDescription": "Mécanisme d'extension.",
        "longDescription": "En UML, un stéréotype est un mécanisme d'extension qui permet d'ajouter de nouvelles significations ou de spécialiser les significations d'éléments existants du modèle. Les stéréotypes fournissent un moyen de créer de nouveaux types d'éléments de modèle en construisant sur les éléments existants. C'est une partie essentielle des profils UML, qui sont utilisés pour personnaliser UML pour des domaines ou des plateformes spécifiques.<br>Chaque stéréotype à un nom unique, s'applique à un élément existant et peut introduire des propriétés inconnues à l'élément auquel il s'attache.<br>Il permettent d'apporter des précisions lorsque le modèle UML est trop général.",
        "imageUrl": "assets/images/uml/stereotype/stereotype.png",
        "source": "https://www.uml-diagrams.org/stereotype.html"
      },
      {
        "id": 1,
        "title": "Diagramme de classe",
        "type": "Structurel",
        "shortDescription": "Diagramme le plus employé, exposant la structure statique d'un système.",
        "longDescription": "Diagramme le plus employé, il permet la représentation fidèle d'un système programmé en orienté objet.<br>Il représente les classes de manière statique ainsi que les liens entre elles, leurs attributs et comportements.<br><br>",
        "imageUrl": "assets/images/uml/class/class-diagram.png",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 2,
        "title": "Diagramme de composants",
        "type": "Structurel",
        "shortDescription": "Découpage d'un système complexe en composants de taille réduite.",
        "longDescription": "Un diagramme de composants est une version plus spécifique du diagramme de classes, et les mêmes règles de notation s’appliquent. Ce type de visuel représente des composants de taille réduite ainsi que leurs interactions.<br><br>Un composant est une classe représentant :<br>&nbsp&nbsp&nbsp&nbsp- Un élément physique, c'est à dire un élément de code (source, binaire ou exécutable), un script, fichier de commandes, de données, une table...<br>&nbsp&nbsp&nbsp&nbsp- Un regroupement logique (rarement).<br><br> Il peut réaliser un ensemble d'interfaces qui définissent alors le comportement offert à d'autres composants.<br><br>Il peut être représenté des deux manières suivantes :<br><br><img class='illustration' src='assets/images/uml/component/component.png'<br><br><img class='illustration' src='assets/images/uml/component/component-icon.png'",
        "imageUrl": "assets/images/uml/component/component-diagram.png",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 3,
        "title": "Diagramme de déploiement",
        "type": "Structurel",
        "shortDescription": "Indique la manière dont les logiciels sont déployés",
        "longDescription": "Les diagrammes de déploiement indiquent la manière dont les logiciels sont déployés sur les composants matériels d’un système (PC, serveur...). Ces visuels sont particulièrement utiles pour les ingénieurs système et ils illustrent généralement les performances, l’évolutivité, la maintenabilité et la portabilité. Lorsque les composants matériels sont représentés les uns par rapport aux autres, il est plus facile de suivre l’ensemble de votre infrastructure informatique et de s’assurer que tous les éléments sont pris en compte lors d’un déploiement.",
        "imageUrl": "assets/images/uml/deploiement.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 4,
        "title": "Diagramme de structure composite",
        "type": "Structurel",
        "shortDescription": "Plans de la structure interne d’un classifieur",
        "longDescription": "Ces diagrammes représentent la structure interne d’un classifieur, le comportement d'une collaboration ou ses interactions avec son environnement par le biais de ports. C'est une représentation plus proche de la physique des composants internes d'un système pour mieux en comprendre le fonctionnement.",
        "imageUrl": "assets/images/uml/composite.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 5,
        "title": "Diagramme d'objets",
        "type": "Structurel",
        "shortDescription": "Représentation de structures de données à un moment spécifique",
        "longDescription": "Les diagrammes d’objets les instances de classes (objets) à un moment spécifique. C'est en quelque sorte un 'instantané' d'un système. Le diagramme d'objets peut être utilisé après la création du diagramme de classe afin de vérifier l'exhaustivité de ce dernier, élaborer des scénarios de test... Il est représenté similairement à une classe d'un diagramme de classe, ses relations également. L'objet est souvent représenté sous la forme 'nomInstance : NomClasse'.",
        "imageUrl": "assets/images/uml/objets.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 6,
        "title": "Diagramme de paquetages",
        "type": "Structurel",
        "shortDescription": "Illustration des dépendances entre les différents paquetages d'un système",
        "longDescription": "Les diagrammes de paquetages sont utilisés pour illustrer les dépendances entre les différents paquetages d’un système. Ces derniers, représentés sous la forme d’un dossier de fichiers, organisent en groupes les éléments de modèle, tels que les cas d’utilisation ou les classes. En résumé, c'est une manière de représenter l'arborescence des fichiers d'un système.",
        "imageUrl": "assets/images/uml/paquetages.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 7,
        "title": "Diagramme de profil",
        "type": "Structurel",
        "shortDescription": "Mécanisme de personnalisation des modèles.",
        "longDescription": "Récemment ajoutés à UML 2.0, les diagrammes de profil sont uniques et rarement utilisés dans les spécifications. Un diagramme de profil est mieux compris comme un mécanisme d'extensibilité pour personnaliser les modèles UML pour des domaines et des plates-formes spécifiques.<br><br>",
        "imageUrl": "assets/images/uml/profil.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 8,
        "title": "Diagramme de temps",
        "type": "Comportemental",
        "shortDescription": "Illustration des interactions des données dans un temps donné",
        "longDescription": "Description de l'interaction des objets dans un laps de temps donné afin de déterminer la durée des étapes d'un processus et en identifier les améliorations.",
        "imageUrl": "assets/images/uml/temps.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 9,
        "title": "Diagramme d'aperçu des interactions",
        "type": "Comportemental",
        "shortDescription": "Illustration du flux de contrôle entre des nœuds en interaction",
        "longDescription": "Ce diagramme montre comment différents éléments (appelés 'noeuds') interagissent et guident le déroulement d'une action ou d'une tâche:<br>&nbsp&nbsp&nbsp&nbsp- Noeuds initiaux: point de départ de l'action (ouverture d'application par exemple).<br>&nbsp&nbsp&nbsp&nbsp- Noeuds finaux de flux: pause ou fin temporaire (ajout au panier).<br>&nbsp&nbsp&nbsp&nbsp- Noeuds finaux d'activité: fin de l'action ou de la tâche (envoi d'un mail de confirmation d'inscription).<br>&nbsp&nbsp&nbsp&nbsp- Noeuds de décision: endroit où une décision doit être prise (Connection ou inscription d'un utilisateur).<br>&nbsp&nbsp&nbsp&nbsp- Noeuds de fusion: convergence de chemins (lien vers la homepage disponible partout sur un site).<br>&nbsp&nbsp&nbsp&nbsp- Noeuds de bifurcation: division d'un chemin en plusieurs (liens d'une barre de navigation).<br>&nbsp&nbsp&nbsp&nbsp- Noeuds de jonctions: croisement et interaction de chemins (page récapitulative avant achat).",
        "imageUrl": "assets/images/uml/interactions.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 10,
        "title": "Diagramme de communication",
        "type": "Comportemental",
        "shortDescription": "Illustration des liens entre les objets",
        "longDescription": "Les diagrammes de communication, autrefois appelés diagrammes de collaboration, sont similaires aux diagrammes de séquence mais insistent sur les messages transférés entre les composents. Ils montrent les interactions entre les objets dans un ordre séquentiel. Leur représentation est similaire à celle des diagrammes de classe.",
        "imageUrl": "assets/images/uml/communication.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 11,
        "title": "Modèle de diagramme états-transitions",
        "type": "Comportemental",
        "shortDescription": "Description des états et des transitions",
        "longDescription": "Les diagrammes états-transitions décrivent les états et les transitions d'un objet. Un état correspond aux différentes combinaisons d’informations qu’un objet peut contenir à un instant T, et ce type de diagramme permet de visualiser tous les états possibles et la manière dont l’objet passe de l’un à l’autre.",
        "imageUrl": "assets/images/uml/etats-transitions.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 12,
        "title": "Diagramme de cas d'utilisation",
        "type": "Comportemental",
        "shortDescription": "Représentation des interactions entre les utilisateurs et le système",
        "longDescription": "Les diagrammes de cas d’utilisation modélisent les interactions entre les utilisateurs, représentés sous forme de figurines appelées « acteurs », et le système. Ce type de diagramme est une vue d’ensemble des relations entre les acteurs et les systèmes, ce qui en fait un excellent outil pour présenter le système à un public non technique.",
        "imageUrl": "assets/images/uml/cas-utilisation.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 13,
        "title": "Diagramme de séquence",
        "type": "Comportemental",
        "shortDescription": "Ordre d'interaction des objets",
        "longDescription": "Un diagramme de séquence, parfois appelé diagramme d’événements ou scénario d’événements, montre l’ordre dans lequel les objets interagissent. Ils vous permettent ainsi de représenter visuellement des scénarios d’exécution simples.",
        "imageUrl": "assets/images/uml/sequence.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      },
      {
        "id": 14,
        "title": "Diagramme d'activités",
        "type": "Comportemental",
        "shortDescription": "Illustration des étapes réalisées dans un cas d’utilisation",
        "longDescription": "Les diagrammes d’activités représentent les étapes d'un cas d’utilisation. Les activités peuvent être séquentielles, ramifiées ou simultanées. Ce type de diagramme est utilisé pour montrer le comportement dynamique d’un système, mais il peut également être utile dans la modélisation des processus métier sous la forme de la représentation avancée d'un algorithme.<br><br>",
        "imageUrl": "assets/images/uml/activites.webp",
        "source": "https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML"
      }
    ]
  },
  {
    "dataModel": "merise",
    "diagrams": [
      {
        "id": 1,
        "title": "Modèle Conceptuel de Communication - MCC",
        "type": "Modèles de communication",
        "shortDescription": "Modéliser la communication entre les différents acteurs ",
        "longDescription": "Le MCC représente les acteurs et arcs de communication (direction et voie de communication) entre eux. Nous pouvons définir deux types d'acteurs : les acteurs externes (ex: client, prestataire...) et internes (ex: service des ventes, comptabilité, RH...) au référenciel (entreprise).",
        "imageUrl": "assets/images/merise/mcc.webp",
        "source": "http://www.colar.net/as/cours/analyse/mcc.html#:~:text=Exercice.-,1.,projet%20ou%20d'une%20application."
      },
      {
        "id": 2,
        "title": "Modèle Organisationnel de Communication - MOC",
        "type": "Modèles de communication",
        "shortDescription": "Comprendre, analyser et optimiser la communication au sein d'une organisation.",
        "longDescription": "Le modèle organisationnel de communication va se focaliser d'avantage sur les moyens à mettre en oeuvre, les outils à adopter afin de réaliser le modèle conceptuel de communication. ",
        "imageUrl": "",
        "source": "https://www.memoireonline.com/04/12/5732/m_Modelisation-dun-reseau-informatique-selon-le-vade-mecum-du-gestionnaire-dune-institution-d22.html"
      },
      {
        "id": 3,
        "title": "Modèle Logique de Communication - MLC",
        "type": "Modèles de communication",
        "shortDescription": "Penser la logique sous-jacente au transfert de communication",
        "longDescription": "Le MLC va conceptualiser le cheminement des communications entre les utilisateurs et les bases de données. Comment les communications vont-elle être cherchées ? transformées ?, délivrées ? Cela concerne notamment l'architecture logiciel, les protocoles (TCP/IP, sécurité...), le format des messages (XML, JSON...).",
        "imageUrl": "",
        "source": "https://www.memoireonline.com/04/12/5732/m_Modelisation-dun-reseau-informatique-selon-le-vade-mecum-du-gestionnaire-dune-institution-d23.html"
      },
      {
        "id": 4,
        "title": "Modèle Physique de Communication - MPC",
        "type": "Modèles de communication",
        "shortDescription": "Penser le hardware et choisir les softwares pour la gestion de la communication.",
        "longDescription": "Quels types de serveur ? les adresses IP, les ports ? Les logiciels de sécurité, firewall...",
        "imageUrl": "",
        "source": ""
      },
      {
        "id": 5,
        "title": "Modèle Conceptuel de Données - MCD",
        "type": "Modèles de données",
        "shortDescription": "Structurer les données de manière à éviter les redondances.",
        "longDescription": "Egalement appelé modèle entité-association, permet de structurer les données de manière 'inteligente' afin d'éviter, par exemple, les redondances d'informations.<br>Les informations sont regroupées en entités : regroupement d'information permettant de définir un objet ou un individu au sein du système d'information. L'entité dispose d'attributs/propriétés correspondant à la liste des informations la définissant ainsi que d'un identifiant (id).",
        "imageUrl": "assets/images/merise/mcd.webp",
        "source": ""
      },
      {
        "id": 6,
        "title": "Modèle Organisationnel de Données - MOD",
        "type": "Modèles de données",
        "shortDescription": "Gestion des droits sur la base de données.",
        "longDescription": "Le MOD précise les droits des profils d'utilisateurs au sein de l'organisation : ces droits suivent le modèle CRUD (Create, Read, Update, Delete) de requêtes http.",
        "imageUrl": "",
        "source": "https://www.orleans-informatique.com/info/cgo/cours/Fiche%20-%20MOD.pdf"
      },
      {
        "id": 7,
        "title": "Modèle Logique de Données - MLD",
        "type": "Modèles de données",
        "shortDescription": "Décrit comment les données sont stockées de manière générale",
        "longDescription": "Va plus loin que le MCD dans le sens où l'on va établir la manière dont les données seront stockées, établi les clés primaires et étrangères, les relations entre les entités...",
        "imageUrl": "assets/images/merise/mld.webp",
        "source": "https://web.maths.unsw.edu.au/~lafaye/CCM/merise/mld.htm"
      },
      {
        "id": 8,
        "title": "Modèle Physique de Données - MPD",
        "type": "Modèles de données",
        "shortDescription": "Implémente le modèle dans le SGBD.",
        "longDescription": "Traduit en SQL les entités et leurs relation au sein du Système de Gestion de Base de Données.",
        "imageUrl": "assets/images/merise/mpd.webp",
        "source": ""
      },
      {
        "id": 9,
        "title": "Modèle Conceptuel de Traitement - MCT",
        "type": "Modèles de traitement",
        "shortDescription": "Modéliser les traitements d'une application.",
        "longDescription": "Représente chaque traitement en tant que processus (succession d'étapes visant à accomplir une tâche, par exemple le traitement d'une commande client) composé d'évenements (condition qui déclenche un processus), d'opérations (action faisant déclenchée par l'évenement et réalisée dans le but d'obtenir un résultat) et de résultats (produit final ou sortie de processus).",
        "imageUrl": "assets/images/merise/mct.webp",
        "source": "http://www.colar.net/as/cours/analyse/mct.html"
      },
      {
        "id": 10,
        "title": "Modèle Organisationnel de Traitement - MOT",
        "type": "Modèles de traitement",
        "shortDescription": "Décrit le temps, les ressources et le lieu allouées à la gestion des données.",
        "longDescription": "Décrit les propriétés des traitements non mentionnées par le MCD (temps, ressources et lieu)",
        "imageUrl": "assets/images/merise/mot.webp",
        "source": "https://web.maths.unsw.edu.au/~lafaye/CCM/merise/mot.htm"
      },
      {
        "id": 11,
        "title": "Modèle Logique de Traitement - MLT",
        "type": "Modèles de traitement",
        "shortDescription": "Logique métier du MOT",
        "longDescription": "S'attache à comment l'information sera traitée, dans le logiciel, depuis la requête jusqu'à la délivrance de l'information.",
        "imageUrl": "assets/images/merise/mlt.webp",
        "source": "https://www.memoireonline.com/11/19/11209/m_Conception-et-realisation-d-une-application-de-gestion-de-l-octroi-titres-parcellaire-dans-une-inst29.html#:~:text=Le%20mod%C3%A8le%20logique%20de%20traitement%20comprend%20la%20partie%20visible%2C%20la,le%20mod%C3%A8le%20logique%20de%20donn%C3%A9es."
      },
      {
        "id": 12,
        "title": "Modèle Physique de Traitement - MPT",
        "type": "Modèles de traitement",
        "shortDescription": "Architecture du programme.",
        "longDescription": "Le MPT consiste à détailler l'architecture du logiciel de traitement sous forme d'arboressence.",
        "imageUrl": "",
        "source": "https://www.memoireonline.com/08/11/4671/m_Mise-en-oeuvre-dune-solution-informatique-pour-loptimisation-de-la-gestion-des-ouvrages-dans-u26.html"
      }
    ]
  }
]
